// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemplateClient is the client API for Template service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateClient interface {
	// many messages are sent and one is recieved
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Template_SendMessageClient, error)
}

type templateClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateClient(cc grpc.ClientConnInterface) TemplateClient {
	return &templateClient{cc}
}

func (c *templateClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Template_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Template_ServiceDesc.Streams[0], "/proto.Template/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &templateSendMessageClient{stream}
	return x, nil
}

type Template_SendMessageClient interface {
	Send(*Message) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type templateSendMessageClient struct {
	grpc.ClientStream
}

func (x *templateSendMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *templateSendMessageClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemplateServer is the server API for Template service.
// All implementations must embed UnimplementedTemplateServer
// for forward compatibility
type TemplateServer interface {
	// many messages are sent and one is recieved
	SendMessage(Template_SendMessageServer) error
	mustEmbedUnimplementedTemplateServer()
}

// UnimplementedTemplateServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateServer struct {
}

func (UnimplementedTemplateServer) SendMessage(Template_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedTemplateServer) mustEmbedUnimplementedTemplateServer() {}

// UnsafeTemplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateServer will
// result in compilation errors.
type UnsafeTemplateServer interface {
	mustEmbedUnimplementedTemplateServer()
}

func RegisterTemplateServer(s grpc.ServiceRegistrar, srv TemplateServer) {
	s.RegisterService(&Template_ServiceDesc, srv)
}

func _Template_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TemplateServer).SendMessage(&templateSendMessageServer{stream})
}

type Template_SendMessageServer interface {
	SendAndClose(*Ack) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type templateSendMessageServer struct {
	grpc.ServerStream
}

func (x *templateSendMessageServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *templateSendMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Template_ServiceDesc is the grpc.ServiceDesc for Template service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Template_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Template",
	HandlerType: (*TemplateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Template_SendMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/template.proto",
}
